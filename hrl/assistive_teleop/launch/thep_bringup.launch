<launch>
<!--  <include file="$(find pr2_machine)/$(env ROBOT).machine" /> -->

  <machine name="c1" address="c1" ros-root="$(env ROS_ROOT)" ros-package-path="$(env ROS_PACKAGE_PATH)" />
  <machine name="c2" address="c2" ros-root="$(env ROS_ROOT)" ros-package-path="$(env ROS_PACKAGE_PATH)" />

<!-- load ik -->
  <include file="$(find pr2_arm_navigation_kinematics)/launch/right_arm_collision_free_ik.launch"/>
  <include file="$(find pr2_arm_navigation_kinematics)/launch/left_arm_collision_free_ik.launch"/>
  <param name="pr2_right_arm_kinematics/object_padd" value="0.04"/>
  <param name="pr2_left_arm_kinematics/object_padd" value="0.04"/>

<!-- Launch move_arm for both arms, based on Matei-and-Kaijen's pr2_interactive_manipulation startup -->
    <include file="$(find web_teleop_trunk)/launch/pr2_manipulation_prerequisites.launch" />

<!-- Start Tuck Arm Action Server and Intermediary-->
    <!--<node name="tuck_arm_node" pkg="pr2_tuck_arms_action" type="tuck_arms.py" output="screen" machine="c2" /> -->
    <!--<node name="tuck_arm_intermediary" pkg="web_teleop_trunk" type="tuck_arms_intermediary.py" output="screen" machine="c2" />-->

<!-- Bring up intermediary for handling arm movements, one for each arm -->
    <node name="left_arm_actions" pkg="web_teleop_trunk" type="l_arm_actions.py" output="screen"/>
    <node name="right_arm_actions" pkg="web_teleop_trunk" type="r_arm_actions.py" output="screen"/>

<!-- Bring up utility frame publisher and updater for each arm -->
    <node name="r_utility_frame_source" pkg="web_teleop_trunk" type="r_utility_frame.py" output="screen" machine="c2"/>
    <node name="l_utility_frame_source" pkg="web_teleop_trunk" type="l_utility_frame.py" output="screen" machine="c2"/>

<!-- Launch Image Rotation Nodes for forearm cameras to keep frames upright -->
    <node name="image_rotater_right" pkg="image_rotate" type="image_rotate" machine = "c2"> 
      <remap from="image" to="/r_forearm_cam/image_color" />
      <remap from="rotated/image" to="/r_forearm_cam/image_color_rotated" />
    </node>
    <node name="image_rotater_left" pkg="image_rotate" type="image_rotate" machine="c2"> 
      <remap from="image" to="/l_forearm_cam/image_color" />
      <remap from="rotated/image" to="/l_forearm_cam/image_color_rotated" />
    </node>

<!-- Speech node.  Replaces normal soundplay_node, provides festival -tts text to speech using a good voice -->
    <node pkg ="web_teleop_trunk" type="speech_node.py" name="sound_play" machine="c1"/>

<!-- Launch Kinect with GT launch files (gt-ros-pkg) -->
  <include file="$(find hrl_pr2_lib)/launch/openni_kinect_polled.launch" /> 

<!--3d point from Pixel Node-->
    <node pkg="pixel_2_3d" type="pixel_2_3d" name="pixel_2_3d" machine="c1" >
        <remap from="image" to="/kinect_head/rgb/image_color" />
        <remap from="point_cloud" to="/kinect_head/rgb/points" />
        <param name="normal_radius" type="double" value="0.035" />
    </node>

<!-- Arrow overlay -->
    <node pkg="hrl_clickable_display" type="arrow_overlay" name="arrow_overlay" respawn="true" machine="c2" output="screen">
        <remap from="/image_in" to="/kinect_head/rgb/image_color" />
        <remap from="/image_out" to="/arrow_overlaid" />
        <param name="shaft_size" type="double" value="0.1" />
        <param name="head_width" type="double" value="0.03" />
        <param name="head_length" type="double" value="0.03" />
        <param name="debug_mode" type="bool" value="true" />
        <param name="auto_clear" type="bool" value="true" />
    </node>

<!-- Throttling nodes for the topics used by the interface -->	
    <node name="throttle_torso_position_controller_state" pkg="topic_tools" type="throttle" args="messages /torso_controller/state 2 /torso_state_throttle" />
    <node name="throttle_head_traj_controller_state" pkg="topic_tools" type="throttle" args="messages /head_traj_controller/state 8 /head_traj_controller_state_throttle" />
    <node name="throttle_r_gripper_controller_state" pkg="topic_tools" type="throttle" args="messages /r_gripper_controller/state 1 /r_gripper_controller_state_throttle" />
    <node name="throttle_l_gripper_controller_state" pkg="topic_tools" type="throttle" args="messages /l_gripper_controller/state 1 /l_gripper_controller_state_throttle" />
    <node name="throttle_r_arm_joints_state" pkg="topic_tools" type="throttle" args=" messages /r_arm_controller/state 8 /r_arm_controller_state_throttle" />
    <node name="throttle_l_arm_joints_state" pkg="topic_tools" type="throttle" args=" messages /l_arm_controller/state 8 /l_arm_controller_state_throttle" />
    <node name="throttle_wt_force_out" pkg="topic_tools" type="throttle" args=" messages /wt_force_out 8 /wt_force_out_throttle" />

<!-- Launch mjpeg server, used for sending image streams -->
    <node pkg="mjpeg_server" type="mjpeg_server"  name="mjpeg_server" machine="c1" output="screen">
                <param name="port" type="int" value="8080" />
    </node>

<!-- Set port to 9091, start rosjs -->
                <param name="/brown/rosjs/port" type="int" value="9091" />
    <node name="rosbridge" pkg="rosbridge" type="rosbridge.py" machine="c1" output="screen"/>

</launch>
