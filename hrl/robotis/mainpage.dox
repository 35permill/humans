/**
\mainpage
\htmlinclude manifest.html

\b point_cloud_ros is some python code to test point_cloud_mapping from personalrobots. 

This code has been tested for the following servos:
Robotis Dynamixel RX-28 and RX-64.

One place to purchase the servos is
http://www.crustcrawler.com/motors/RX28/index.php?prod=66

This device gives a serial interface that this code
uses to control the servo:
http://www.crustcrawler.com/electronics/USB2Dynamixel/index.php?prod=65


How to run the code:

cd bin

1. ./robotis_servo -h   # this will print out the command line params that the code accepts.

2. ./robotis_servo -d /dev/ttyUSB0 --ang=30 --id=1  # moves a servo with id 1 connected to ttyUSB0 to angle 30 degrees.

\section rosapi ROS API


<!--

\subsubsection Usage
\verbatim
$ ros_point_clouder --pc numpy_pc_2009Jun01_182408.pkl [standard ROS args]
\endverbatim

\par Example

\verbatim
$ node_type1
\endverbatim


\subsubsection topics ROS topics

Subscribes to:
- \b "in": [std_msgs/FooType] description of in

Publishes to:
- \b "out": [std_msgs/FooType] description of out

\subsubsection parameters ROS parameters

Reads the following parameters from the parameter server

- \b "~param_name" : \b [type] description of param_name
- \b "~my_param" : \b [string] description of my_param

Sets the following parameters on the parameter server

- \b "~param_name" : \b [type] description of param_name


\subsubsection services ROS services
- \b "foo_service": [std_srvs/FooType] description of foo_service



\section commandline Command-line tools

This section is a catch-all for any additional tools that your package
provides or uses that may be of use to the reader. For example:

- tools/scripts (e.g. rospack, roscd)
- roslaunch .launch files
- xmlparam files

\subsection script_name script_name

Description of what this script/file does.

\subsubsection Usage
\verbatim
$ ./script_name [args]
\endverbatim

\par Example

\verbatim
$ ./script_name foo bar
\endverbatim
*/

-->

