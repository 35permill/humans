/**
\mainpage
\htmlinclude manifest.html

\section Overview

This hrl_camera package was designed simpler usage and management of cameras.
It includes 3 components.  First, it includes scripts for making cameras
accessible over ROS.  Second, it provides a method to uniquely reference
different cameras. Finally, it provides a python interfrace for
cameras to be accessed using Python code.

\section Usage

In Python, to use cameras declared in this package's camera_config.py: 

import hrl_camera.hrl_camera as hc
camera_object = hc.find_camera('CAMERA_NAME')

The function find_camera takes as input a string, looks up that string in
the dictionary declared in camera_config.py, then instantiate and returns
an object of the appropriate class.

To make this little bit of magic happen for a specific camera, two bits of
information are required.  First, the camera's parameters must be in the
file src/hrl_camera/camera_config.py.  As far as this library is concerned,
the particular entry provided in camera_config.py must provide a 'uuid' and
'class' field.  All other fields are specific to the particular camera class
used.  The 'uid' field gives the unique ID of the specific camera (valid for
firewire devices).  The 'class' field provide the name of the python file and
the name of the class found in that file that hrl_camera should instantiate.  
It is important that this file be somewhere in the current process's python
path when hrl_camera runs.

As for the camera class defined, its __init__() method is required to 
take in the configuration dictionary defined in camera_config.py and
have that parameter be the only parameter that must be provided.

=== Utilities ===
./camera_uuid.py
    prints out connected cameras

./hrl_ros_camera.py CAMERA_NAME
    publishes named camera over ROS
    needs camera class to define get_frame()

./ros_camera.py OPENCV_ID
    works with any opencv accessible camera
    publishes its images over ROS


\section Usage

\section codeapi Code API

<!--
Provide links to specific auto-generated API documentation within your
package that is of particular interest to a reader. Doxygen will
document pretty much every part of your code, so do your best here to
point the reader to the actual API.

If your codebase is fairly large or has different sets of APIs, you
should use the doxygen 'group' tag to keep these APIs together. For
example, the roscpp documentation has 'libros' group.
-->


*/
This package provides a number of utilities and enhanced driver interfaces for
cameras used in the Healthcare Robotics lab.  Currently, we have support for
Point Grey's Dragonfly and Firefly cameras.  Registering supported cameras with
this package allows pairing cameras' UUIDs with human friendly names, launching cameras
as ROS nodes, and publishing undistorted debayered images.
